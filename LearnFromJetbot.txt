import time
import traitlets
from traitlets.config.configurable import SingletonConfigurable
# from Adafruit_MotorHAT import Adafruit_MotorHAT

import atexit
from traitlets.config.configurable import Configurable

class Motor(Configurable):

    value = traitlets.Float()
    
    # config
    alpha = traitlets.Float(default_value=1.0).tag(config=True)
    beta = traitlets.Float(default_value=0.0).tag(config=True)

    def __init__(self, driver, channel, *args, **kwargs):
        super(Motor, self).__init__(*args, **kwargs)  # initializes traitlets

        self._driver = driver
        self._motor = self._driver.getMotor(channel)
        atexit.register(self._release)
        
    @traitlets.observe('value')
#     def _observe_value(self, change):
#         self._write_value(change['new'])

#     def _write_value(self, value):
#         """Sets motor value between [-1, 1]"""
#         mapped_value = int(255.0 * (self.alpha * value + self.beta))
#         speed = min(max(abs(mapped_value), 0), 255)
#         self._motor.setSpeed(speed)
#         if mapped_value < 0:
#             self._motor.run(Adafruit_MotorHAT.FORWARD)
#         else:
#             self._motor.run(Adafruit_MotorHAT.BACKWARD)

#     def _release(self):
#         """Stops motor by releasing control"""
#         self._motor.run(Adafruit_MotorHAT.RELEASE)


class Robot(SingletonConfigurable):
    
    left_motor = traitlets.Instance(Motor)
    right_motor = traitlets.Instance(Motor)

    # config
    i2c_bus = traitlets.Integer(default_value=1).tag(config=True)
    left_motor_channel = traitlets.Integer(default_value=1).tag(config=True)
    left_motor_alpha = traitlets.Float(default_value=1.0).tag(config=True)
    right_motor_channel = traitlets.Integer(default_value=2).tag(config=True)
    right_motor_alpha = traitlets.Float(default_value=1.0).tag(config=True)
    
    def __init__(self, *args, **kwargs):
        super(Robot, self).__init__(*args, **kwargs)
#         self.motor_driver = Adafruit_MotorHAT(i2c_bus=self.i2c_bus)
        self.left_motor = Motor(self.motor_driver, channel=self.left_motor_channel, alpha=self.left_motor_alpha)
        self.right_motor = Motor(self.motor_driver, channel=self.right_motor_channel, alpha=self.right_motor_alpha)
        
#     def set_motors(self, left_speed, right_speed):
#         self.left_motor.value = left_speed
#         self.right_motor.value = right_speed
        
#     def forward(self, speed=1.0, duration=None):
#         self.left_motor.value = speed
#         self.right_motor.value = speed

#     def backward(self, speed=1.0):
#         self.left_motor.value = -speed
#         self.right_motor.value = -speed

#     def left(self, speed=1.0):
#         self.left_motor.value = -speed
#         self.right_motor.value = speed

#     def right(self, speed=1.0):
#         self.left_motor.value = speed
#         self.right_motor.value = -speed

#     def stop(self):
#         self.left_motor.value = 0
#         self.right_motor.value = 0
        
robot = Robot()

import ipywidgets.widgets as widgets
from IPython.display import display

# create two sliders with range [-1.0, 1.0]
left_slider = widgets.FloatSlider(description='left', min=-1.0, max=1.0, step=0.01, orientation='vertical')
right_slider = widgets.FloatSlider(description='right', min=-1.0, max=1.0, step=0.01, orientation='vertical')

# create a horizontal box container to place the sliders next to eachother
slider_container = widgets.HBox([left_slider, right_slider])

# display the container in this cell's output
display(slider_container)

import traitlets

left_link = traitlets.link((left_slider, 'value'), (robot.left_motor, 'value'))
right_link = traitlets.link((right_slider, 'value'), (robot.right_motor, 'value'))